# ######################
# 此文件非必要不用修改！
# ######################

# FFprobe 可执行程序地址，为空自动搜索
ffprobe: ~
# FFmpeg 可执行程序地址，为空自动搜索
ffmpeg: ~
# biliup-rs可执行文件地址，为空自动搜索
biliup: ~

# 录制参数
downloader:
  # 录制输出文件夹，设置为空则使用主播名称作为文件夹
  output_dir: ./直播回放

  # 录制文件名称格式，可使用关键字替换，默认效果：飞天狙想要努力变胖-2023年3月1日20点30分，注意这里不能含有冒号，斜杠等非法字符！！
  output_name: '{STREAMER}-{YEAR}年{MONTH}月{DAY}日{HOUR}点{MINUTE}分'

  # 录制程序引擎，可选ffmpeg（由ffmpeg提供拉流服务）或者streamgears（使用streamgears提供拉流服务，此功能正在测试）
  # 在使用streamgears作为录制引擎时，录制视频格式只能是flv
  engine: ffmpeg

  # 录播分段时间（秒），默认一个小时
  segment: 3600

  # 是否录制弹幕
  danmaku: True

  # 是否录制直播流
  video: True

  # 启动自动渲染
  auto_render: True

  # 延迟下播计时（分钟）
  end_cnt: 1

  # 默认分辨率，此功能暂不可用
  resolution: ~

  # 录制视频的格式，默认flv
  # 使用streamgears作为录制引擎应该使用flv
  vid_format: flv

  # 直播流CDN选项
  # 对于虎牙直播，此项可选al, tx, hw等cdn服务器的缩写，默认al
  # 对于B站，此项可选0-n表示不同的cdn服务器，默认为0，也可以输入特定的CDN域名前缀，例如 c1--cn-gotcha208
  # 斗鱼和抖音暂时没用
  flow_cdn: ~

  # 高级视频录制参数，具体可用选项请参考文档
  advanced_video_args: ~
  
  # 以下是弹幕录制参数

  # 弹幕录制格式，只能选择ass
  dm_format: ass 

  # 弹幕上下间距（行距），设置为0-1的表示为视频宽度的倍数，设置为大于1的数表示像素，默认6
  margin_h: 6

  # 弹幕左右间距，设置为-1表示允许弹幕叠加，设置为0-1的表示间距为视频宽度的倍数，设置为大于1的数表示像素，默认0.05
  margin_w: 0.05

  # 指定弹幕占屏幕的最大比例（即屏幕上半部分有多少可以用来显示弹幕），默认为0.4
  dmrate: 0.4

  # 指定弹幕字体，默认为微软雅黑字体(Microsoft YaHei)
  font: Microsoft YaHei

  # 指定弹幕字体大小，默认为36
  fontsize: 36

  # Distance from Screen Top 弹幕距离屏幕顶端的距离（像素，例如20，表示距离屏幕顶端20px）
  dst: 20

  # 指定单条弹幕持续时间（秒），默认为16
  dmduration: 16

  # 指定弹幕不透明度，默认为0.8
  opacity: 0.8

  # 使用自适应弹幕大小（会让把设置的弹幕大小按1080P标准缩放）
  auto_fontsize: True

  # 弹幕描边颜色(6位十六进制)
  outlinecolor: 000000

  # 弹幕描边宽度
  outlinesize: 1.0
  
  # 弹幕过滤规则，一个正则表达式数组（也可以直接输入关键字），满足其中任意条件的弹幕将被过滤，默认为空（不过滤弹幕）
  # 例如：[菜, fw]
  dm_filter: []

  # 高级弹幕录制参数，具体可用选项请参考文档
  advanced_dm_args: ~

# 渲染参数
render:
  # 渲染输出文件夹，默认为空（在录制输出文件夹后面加上“带弹幕版”）
  output_dir: ~

  # 生成的视频文件格式，默认mp4
  format: mp4

  # 渲染引擎，可选ffmpeg（纯ffmpeg渲染）或者python（Python PIL作为弹幕的图像渲染器，ffmpeg作为视频编码器，此功能正在测试，请勿使用）
  engine: ffmpeg

  # 同时执行的渲染任务数，默认1，若渲染时CPU和GPU使用都低于80%可以调高这个，一般情况下设置应该小于5
  # 特别提示：如果渲染一个CPU或者显卡占用都很高，调高这个反而有副作用！
  nrenders: 1

  # 硬件解码参数，默认由FFmpeg自动判断，如果出现问题可以设为空
  hwaccel_args: [-hwaccel, auto]

  # 视频编码器，NVIDIA设置为h264_nvenc，AMD设置为h264_amf，CPU设置为libx264
  vencoder: h264_nvenc

  # 视频编码器参数，默认恒定码率15Mbps
  vencoder_args: [-b:v, 15M]

  # 音频编码器
  aencoder: aac

  # 音频编码器参数，默认恒定码率320Kbps
  aencoder_args: [-b:a, 320K]

  # 输出重缩放，会把输出重缩放到指定分辨率，可以设置为'3840x2160'用于在B站传伪4K保证清晰度
  output_resize: ~

  # 高级渲染参数，具体可用选项请参考文档
  advanced_render_args: ~

  watermark_text: "默认水印"

  font_path: "tools/PingFang.ttc"

  # 以下参数只适用于python渲染器
  # 渲染线程数（单个渲染器使用的进程数量），默认2
  nproc: 2

  # 渲染管道缓冲区大小（MB）
  bufsize: 100

  # 弹幕重排序
  danmaku_resort: False

# 自动上传参数
uploader:
  # 最大并行任务数，在录制多个主播时允许同时上传的最大视频数量，设置为-1表示不限制，默认1
  nuploaders: 1

  # 上传目标（目前只有B站）
  bilibili:
    # 上传引擎，目前只能选biliuprs
    engine: biliuprs

    # 上传账号名称，程序依靠这个来识别不同的账号，如果打算传不同账号就要设置不同的名称
    account: bilibili

    # 重试次数，如果上传遇到错误将会重试，设置为0表示不重试
    retry: 0

    # 上传超时时间（秒），如果上传时间超过这个时间将会被强制终止（用于防止biliup卡死），0表示不限制
    timeout: 0

    # 实时上传，每录制一个分段上传一次，同一场直播的不同分P仍然会在一个视频下，默认关闭
    # 如果启用实时上传，请保证上传速度足够，否则可能阻塞上传队列
    realtime: False

    # 登录信息保存的cookies路径，默认为空（由程序自动生成".temp/<上传账号名称>.json"的文件）
    # 如果同时指定上传账号和cookies，那么程序会优先使用cookies路径
    cookies: ~

    # 上传的视频最短长度，小于此长度的视频会被自动过滤，默认五分钟
    min_length: 300

    # 以下参数来自biliuprs，详细内容可以参考 https://biliup.github.io/biliup-rs/index.html
    # 上传线路
    line: bda2

    # 上传线程数
    limit: 3

    # 是否为转载视频 1-自制 2-转载
    copyright: 1

    # 转载来源
    source: ''

    # 分区号，分区参考 https://biliup.github.io/tid-ref.html
    tid: 65

    # 封面，指向本地文件地址
    cover: ''

    # 标题，可以使用关键字替换
    # {STREAMER}主播名称，{TITLE}标题，{YEAR}年，{MONTH}月，{DAY}日，{HAS_DANMU}“带弹幕版”这几个字，{URL}直播间链接
    # 默认的例子：[飞天狙想要努力变胖/直播回放] 晚上七点半比赛 2023年2月24日 （带弹幕版）
    title: '[{STREAMER}/直播回放] {TITLE} {YEAR}年{MONTH}月{DAY}日 {HAS_DANMU}'

    # 简介，可以使用关键字替换
    desc: "{STREAMER} 的直播回放{HAS_DANMU} \n标题：{TITLE} \n时间：{YEAR}年{MONTH}月{DAY}日 \n直播地址：{URL} \n\n————————————\n由DanmakuRender录制： \nhttps://github.com/SmallPeaches/DanmakuRender"
    
    # 动态内容，可以使用关键字替换
    dynamic: '{STREAMER} 的直播回放，{YEAR}年{MONTH}月{DAY}日'

    # 互动视频
    interactive: 0

    # 标签（一定要有！多个标签逗号分割）
    tag: '直播回放'

    # 延迟发布，单位秒
    dtime: 0

    # 是否开启杜比音效? 0-关闭 1-开启
    dolby: 0

    # 允许转载? 0-允许转载，1-禁止转载
    no_reprint: 1

    # 是否开启充电? 0-关闭 1-开启
    open_elec: 1

# 自动清理参数
cleaner:
  # 移动文件
  move:
    # 目标文件夹，可以使用关键字替换，文件夹不存在会自动创建
    # 如果设置为空或者"*TRASHBIN*"，那么文件将会被移动至回收站
    dest: ~

    # 清理延迟（秒），在上传完成后会过一段时间再清理
    delay: 86400

    # （此功能暂不生效）只清理此次运行中上传成功的文件
    strict: True

    # （此功能暂不生效）是否等待执行完成
    wait: True

  # 复制文件
  copy:
    # 目标文件夹，可以使用关键字替换，文件夹不存在会自动创建
    dest: ~

    # 复制延迟（秒），在上传完成后会过一段时间再复制
    delay: 0

    # （此功能暂不生效）只复制此次运行中上传成功的文件
    strict: True

    # （此功能暂不生效）是否等待执行完成
    wait: True

  # 删除文件
  delete:
    # 删除延迟（秒），在上传完成后会过一段时间再复制
    delay: 172800

    # （此功能暂不生效）只复制此次运行中上传成功的文件
    strict: True

    # （此功能暂不生效）是否等待执行完成
    wait: True
